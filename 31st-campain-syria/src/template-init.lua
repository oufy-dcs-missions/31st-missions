---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by oufy.
--- DateTime: 09/02/2021 17:37
---
-- *****************************************************************************
-- *                         Global Objects creation                           *
-- *****************************************************************************
--
-- Beacons
--

--
-- Scheduler Object
--

--
-- Sound Objects
--
snd1020HzTone = USERSOUND:New( "1020Hz_DF_tone.wav" )
-- *****************************************************************************
-- *                           Mission functions                               *
-- *****************************************************************************
--
-- Generic Spawn object functions
--
function taskTankerEscort(param)
    local recoveryTankerConfig = param[1]
    local recoveryTankerObject = param[2]
    local EscortGroup = param[3]
    EscortGroup:OptionAlarmStateRed()
    --EscortGroup:OptionROEReturnFire()
    EscortGroup:TraceOn()
    EscortGroup:OptionRTBAmmo(true)
    EscortGroup:OptionRTBBingoFuel(true)
    EscortGroup:SetTask(
            EscortGroup:TaskEscort(
                    GROUP:FindByName(recoveryTankerObject.tanker.GroupName),
                    POINT_VEC3:New( 0, 10, 150 ):GetVec3(),
                    20,
                    40*1800,
                    {'Air'}),
            1)
    env.info('Escort group spawned : '.. EscortGroup.GroupName..'. Escorting '..recoveryTankerObject.tanker.GroupName)
end
function spawnRecoveryTankerEscort(escortSpawnObject,customconfig)
    return escortSpawnObject
            :SpawnAtAirbase(AIRBASE:FindByName(customconfig.baseUnit),SPAWN.Takeoff.Cold, customconfig.altitude)
end

function populate_SC(shipName)
    local shipID = UNIT:FindByName(shipName):GetDCSObject():getID()
    local staticObj = {
        ["name"] = "16temp Blocker Point S3", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "US NAVY - VS-24 CAG",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = 34.469735879975,
            ["angle"] = 6.0911990894602,
            ["x"] = 67.739295549996,
        }, -- end of ["offsets"]
        ["type"] = "S-3B",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Blocker Island Seahawk", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "US Navy - HS-5",
        ["category"] = "Helicopters",
        ["offsets"] =
        {
            ["y"] = 15.023588829965,
            ["angle"] = 6.0039326268605,
            ["x"] = -44.319651074009,
        }, -- end of ["offsets"]
        ["type"] = "UH-60A",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Blocker Island Hornet", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line NH",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = 17.969597139978,
            ["angle"] = 5.7595865315813,
            ["x"] = -61.257363910001,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Blocker Yunk Yard Hornet", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line NH",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = 20.798515920003,
            ["angle"] = 5.7246799465414,
            ["x"] = -78.309457666997,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    local staticObj = {

        ["name"] = "16temp Finger Seahawk", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "US Navy - 01",
        ["category"] = "Helicopters",
        ["offsets"] =
        {
            ["y"] = -25.023610410048,
            ["angle"] = 1.7976891295542,
            ["x"] = -120.511512843,
        }, -- end of ["offsets"]
        ["type"] = "UH-60A",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Junk Yard Tug", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["offsets"] =
        {
            ["y"] = 29.219321732642,
            ["angle"] = 2.4958208303519,
            ["x"] = -77.186823118536,
        }, -- end of ["offsets"]
        ["type"] = "AS32-31A",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp LSO Station 3", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = -22.370473980031,
            ["angle"] = 2.4434609527921,
            ["x"] = -130.61201797701,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_lso_usa",
        ["type"] = "Carrier LSO Personell",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp LSO Station 1", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = -21.789118479996,
            ["angle"] = 4.2935099599061,
            ["x"] = -129.42353100701,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_lso1_usa",
        ["type"] = "Carrier LSO Personell 1",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp LSO Station 2", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "white",
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = -22.656188270019,
            ["angle"] = 1.850049007114,
            ["x"] = -129.497732263,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_tech_USA",
        ["type"] = "us carrier tech",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Corral Tech 1", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "yellow",
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = 24.378384780779,
            ["angle"] = 3.1764992386297,
            ["x"] = -1.862423344297,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_tech_USA",
        ["type"] = "us carrier tech",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    local staticObj = {

        ["name"] = "16temp Corral Tech 2", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "yellow",
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = 24.943464248674,
            ["angle"] = 5.218534463463,
            ["x"] = -2.5415543022973,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_tech_USA",
        ["type"] = "us carrier tech",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Yunk Yard Seaman", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = 30.850786532392,
            ["angle"] = 4.7472955654246,
            ["x"] = -76.189816852042,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_seaman_USA",
        ["type"] = "Carrier Seaman",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Corral Tug", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["category"] = "ADEquipment",
        ["offsets"] =
        {
            ["y"] = 25.915128857188,
            ["angle"] = 2.4958208303519,
            ["x"] = -1.4404247678031,
        }, -- end of ["offsets"]
        ["type"] = "AS32-31A",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp EL1 Tech 1", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "yellow",
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = 19.968042107823,
            ["angle"] = 1.5707963267949,
            ["x"] = 28.511725836535,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_tech_USA",
        ["type"] = "us carrier tech",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Patio Firetruck", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["category"] = "ADEquipment",
        ["offsets"] =
        {
            ["y"] = 29.26265261037,
            ["angle"] = 1.7453292519943,
            ["x"] = -112.85393314034,
        }, -- end of ["offsets"]
        ["type"] = "AS32-p25",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "16temp Patio Tech", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "white",
        ["category"] = "Personnel",
        ["offsets"] =
        {
            ["y"] = 26.2488428746,
            ["angle"] = 3.700098014228,
            ["x"] = -111.91510989917,
        }, -- end of ["offsets"]
        ["shape_name"] = "carrier_tech_USA",
        ["type"] = "us carrier tech",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    LeaveRecovery(shipName)

end
function EnterRecovery(shipName)
    local shipID = UNIT:FindByName(shipName):GetDCSObject():getID()
    --put Hornet on CatII
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 1", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -8.4167411836679,
            ["angle"] = 0.27925268031909,
            ["x"] = 154.99358265282,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 2", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -7.7287177100079,
            ["angle"] = 0.73303828583762,
            ["x"] = 143.11477288499,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 3", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -7.7287177100079,
            ["angle"] = 0.50614548307836,
            ["x"] = 130.918647436,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 4", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -8.8594843100291,
            ["angle"] = 0.83775804095728,
            ["x"] = 117.83406251699,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 5", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -8.95903232001,
            ["angle"] = 0.82030474843733,
            ["x"] = 106.88254922599,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 6", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -7.3248725000303,
            ["angle"] = 0.59341194567807,
            ["x"] = 94.89565438799,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 7", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -5.3056464300025,
            ["angle"] = 0.68067840827779,
            ["x"] = 81.164917126996,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassRecoverCat 2 Hornet 8", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -3.2056513199932,
            ["angle"] = 0.36651914291881,
            ["x"] = 64.930339543003,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    --Remove FanTail Planes
    do
        local statObj = coalition.getStaticObjects(2) 					--1 Red coalition 2 blue coalition
        for i, static in pairs(statObj) do
            local staticName = static:getName()
            if string.match(staticName, "MassLaunch Fantail.*") then
                static:destroy()				-- removes the object
            end
        end
    end
end
function LeaveRecovery(shipName)
    local shipID = UNIT:FindByName(shipName):GetDCSObject():getID()
    --Put Hornets on FanTail
    local staticObj = {

        ["name"] = "MassLaunch Fantail Hornet 1", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -5.8173064400326,
            ["angle"] = 1.2566370614359,
            ["x"] = -158.547306564,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassLaunch Fantail Hornet 2", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -8.4159270400414,
            ["angle"] = 1.2566370614359,
            ["x"] = -148.360713827,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassLaunch Fantail Hornet 3", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -11.118492459995,
            ["angle"] = 1.2566370614359,
            ["x"] = -138.48595556,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassLaunch Fantail Hornet 4", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = -13.301333760028,
            ["angle"] = 0.97738438111682,
            ["x"] = -127.467804232,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************
    local staticObj = {

        ["name"] = "MassLaunch Fantail Hornet 5", -- unit name (Name this something identifiable if you wish to remove it later)
        -- Copy and paste over this with the units information
        ["livery_id"] = "VFA-31 Line",
        ["category"] = "Planes",
        ["offsets"] =
        {
            ["y"] = 8.8389137199847,
            ["angle"] = 6.1261056745001,
            ["x"] = -151.790893014,
        }, -- end of ["offsets"]
        ["type"] = "FA-18C_hornet",
        -- Copy and paste over this with the units information end

        -- these can be left as is, but is required.
        ["groupId"] = 33,		-- id's of the unit we're spawning (will auto increment if id taken?)
        ["unitId"] = 33,
        ["y"] = -00127900,			-- The initial location of the unit (required else unit will offet on origin of map)
        ["x"] = -00126557,
        ["heading"] = 37.55948550292,
        ["linkUnit"] = shipID, -- This value must be set Via 'shipID = #' where # is the id of the ship you wish to spawn on
        ["linkOffset"] = true,
        ["dead"] = false,
        ["rate"] = 30,
    }
    coalition.addStaticObject(country.id.USA, staticObj)

    -- ********************************************************

    --Remove Cat II Hornet
    do
        local statObj = coalition.getStaticObjects(2) 					--1 Red coalition 2 blue coalition
        for i, static in pairs(statObj) do
            local staticName = static:getName()
            if string.match(staticName, "MassRecoverCat 2.*") then
                static:destroy()				-- removes the object
            end
        end
    end
end


--
-- Generic Group functions
--

-- *****************************************************************************
-- *                               Mission init                                *
-- *****************************************************************************
--                     **                     Tankers                         **
--                     *********************************************************
tankersArray = {}
compteur = 0
for index, tankerconfig in ipairs(TankersConfig) do
    if tankerconfig.enable == true then
        compteur = compteur + 1
        env.info('creation Tanker : '.. tankerconfig.groupName..'...')
        local objTanker = RECOVERYTANKER:New(UNIT:FindByName(tankerconfig.patternUnit), tankerconfig.groupName)
                                        :SetTakeoffCold()
                                        :SetRespawnOnOff(tankerconfig.autorespawn)
                                        :SetLowFuelThreshold(tankerconfig.fuelwarninglevel)
                                        :SetAltitude(tankerconfig.altitude)
                                        :SetSpeed(tankerconfig.speed)
                                        :SetHomeBase(AIRBASE:FindByName(tankerconfig.baseUnit),tankerconfig.terminalType)
                                        :SetCallsign(tankerconfig.callsign.name, tankerconfig.callsign.number)
                                        :SetRecoveryAirboss(tankerconfig.airboss_recovery)
                                        :SetRadio(tankerconfig.freq)
                                        :SetModex(tankerconfig.modex)
                                        :SetTACAN(tankerconfig.tacan.channel, tankerconfig.tacan.morse)
                                        :SetRacetrackDistances(tankerconfig.racetrack.front, tankerconfig.racetrack.back)
        objTanker.customconfig = tankerconfig
        if tankerconfig.escortgroupname then
            function objTanker:OnAfterStart(from, event, to)
                self.escortSpawnObject = SPAWN:NewWithAlias(self.customconfig.escortgroupname,'escort-'.. self.customconfig.groupName)
                                              :InitRepeatOnEngineShutDown()
                                              :InitSkill("Excellent")
                                              :OnSpawnGroup(function(SpawnGroup)
                    taskTankerEscort({self.customconfig, self, SpawnGroup})
                end)
                self.escortGroupObject = spawnRecoveryTankerEscort(self.escortSpawnObject,self.customconfig)
            end
            function objTanker:OnAfterRTB(from, event, to, airbase)
                env.info('Tanker RTB: '..self.tanker.GroupName..'...')
                if self.escortGroupObject:IsAirborne(false) == true then
                    env.info('escort RTB : '.. self.escortGroupObject.GroupName..' Tanker : '..self.tanker.GroupName..'...')
                    self.escortGroupObject:RouteRTB(airbase)
                else
                    --self.escortGroupObject:Destroy(nil, 5)
                end
            end
            function objTanker:OnEventKill(event)
                env.info(event.target' Killed !! Sending escort Home')
                self.escortGroupObject:RouteRTB(AIRBASE:FindByName(self.customconfig.baseUnit))
            end
            function objTanker:OnAfterStatus(from, event, to)
                if not(GROUP:FindByName(self.escortGroupObject.GroupName)) then
                    env.info('Respawning escort Group '..self.escortGroupObject.GroupName)
                    self.escortGroupObject = self.escortSpawnObject
                                                 :SpawnAtAirbase(AIRBASE:FindByName(self.customconfig.baseUnit),SPAWN.Takeoff.Cold, self.customconfig.altitude)
                end
            end
        end
        tankersArray[compteur] = objTanker
        tankersArray[compteur]:Start()
    end
end


-- *****************************************************************************
--                     **                     Awacs                           **
--                     *********************************************************
AwacsArray = {}
compteur = 0
for index, awacsconfig in ipairs(AwacsConfig) do
    if awacsconfig.enable == true then
        compteur = compteur + 1
        env.info('creation AWACS : '.. awacsconfig.groupName..'...')
        local objAwacs = RECOVERYTANKER:New(UNIT:FindByName(awacsconfig.patternUnit), awacsconfig.groupName)
                                       :SetAWACS(true, true)
                                       :SetTakeoffCold()
                                       :SetRespawnOnOff(awacsconfig.autorespawn)
                                       :SetLowFuelThreshold(awacsconfig.fuelwarninglevel)
                                       :SetAltitude(awacsconfig.altitude)
                                       :SetSpeed(awacsconfig.speed)
                                       :SetHomeBase(AIRBASE:FindByName(awacsconfig.baseUnit),awacsconfig.terminalType)
                                       :SetCallsign(awacsconfig.callsign.name, awacsconfig.callsign.number)
                                       :SetRecoveryAirboss(awacsconfig.airboss_recovery)
                                       :SetRadio(awacsconfig.freq)
                                       :SetModex(awacsconfig.modex)
                                       :SetTACAN(awacsconfig.tacan.channel , awacsconfig.tacan.morse)
                                       :SetRacetrackDistances(awacsconfig.racetrack.front, awacsconfig.racetrack.back)
        objAwacs.customconfig = awacsconfig
        if awacsconfig.escortgroupname then
            function objAwacs:OnAfterStart(from, event, to)
                env.info('popup AWACS : '..self.tanker.GroupName)
                self.escortSpawnObject = SPAWN:NewWithAlias(self.customconfig.escortgroupname,'escort-'.. self.customconfig.groupName)
                                              :InitRepeatOnEngineShutDown()
                                              :InitSkill("Excellent")
                                              :OnSpawnGroup(function(SpawnGroup)
                    taskTankerEscort({self.customconfig, self, SpawnGroup})
                end)
                self.escortGroupObject = spawnRecoveryTankerEscort(self.escortSpawnObject,self.customconfig)
            end
            function objAwacs:OnAfterRTB(from, event, to, airbase)
                env.info('AWACS RTB: '..self.tanker.GroupName..'...')
                if self.escortGroupObject:IsAirborne(false) == true then
                    env.info('escort RTB : '.. self.escortGroupObject.GroupName..' AWACS : '..self.tanker.GroupName..'...')
                    self.escortGroupObject:RouteRTB(airbase)
                else
                    --self.escortGroupObject:Destroy(nil, 5)
                end
            end
            function objAwacs:OnEventKill(event)
                env.info(event.target' Killed !! Sending escort Home')
                self.escortGroupObject:RouteRTB(AIRBASE:FindByName(self.customconfig.baseUnit))
            end
            function objAwacs:OnAfterStatus(from, event, to)
                if not(GROUP:FindByName(self.escortGroupObject.GroupName)) then
                    env.info('Respawning escort Group '..self.escortGroupObject.GroupName)
                    self.escortGroupObject = self.escortSpawnObject
                                                 :SpawnAtAirbase(AIRBASE:FindByName(self.customconfig.baseUnit),SPAWN.Takeoff.Cold, self.customconfig.altitude)
                end
            end
        end
        AwacsArray[compteur] = objAwacs
        AwacsArray[compteur]:Start()
    end
end

-- *****************************************************************************
--                     **                     Rescue Hello                    **
--                     *********************************************************
PedroArray = {}
compteur = 0
for index,pedro in ipairs(PedrosConfig) do
    if pedro.enable == true then
        compteur = compteur +1
        local rescuehelo = RESCUEHELO:New(UNIT:FindByName(pedro.patternUnit),pedro.groupName)
                                     :SetHomeBase(AIRBASE:FindByName(pedro.baseUnit))
                                     :SetTakeoffCold()
                                     :SetRespawnOnOff(pedro.autorespawn)
                                     :SetRescueDuration(1)
                                     :SetModex(pedro.modex)
        function rescuehelo:OnAfterStart(from, event, to)
            self.helo:CommandSetFrequency(pedro.freq, radio.modulation.AM)
        end
        PedroArray[compteur] = rescuehelo
        PedroArray[compteur]:Start()
    end
end

-- *****************************************************************************
--                     **                       AirBoss                       **
--                     *********************************************************
AIRBOSSArray = {}
compteur = 0
for index, airbossconfig in ipairs(AirBossConfig) do
    if airbossconfig.enable == true then
        compteur = compteur +1
        populate_SC(airbossconfig.carriername)
        local objAirboss = AIRBOSS:New(airbossconfig.carriername, airbossconfig.alias)
        objAirboss:SetTACAN(airbossconfig.tacan.channel, airbossconfig.tacan.mode, airbossconfig.tacan.morse)
        objAirboss:SetICLS(airbossconfig.icls.channel, airbossconfig.icls.morse)
        objAirboss:SetLSORadio(airbossconfig.freq.lso)
        objAirboss:SetMarshalRadio(airbossconfig.freq.marshall)
        objAirboss:SetPatrolAdInfinitum(airbossconfig.infintepatrol)
        objAirboss:SetCarrierControlledArea(airbossconfig.controlarea)
        objAirboss:SetStaticWeather(true)
        objAirboss:SetRecoveryCase(airbossconfig.recoverycase)
        objAirboss:SetMaxLandingPattern(airbossconfig.maxpatterns)
        objAirboss:SetDefaultPlayerSkill(airbossconfig.difficulty) -- other options EASY / HARD
        if airbossconfig.handleAI == true then
            objAirboss:SetHandleAION()
        else
            objAirboss:SetHandleAIOFF()
        end
        if airbossconfig.menurecovery.enable == true then
            objAirboss:SetMenuRecovery(airbossconfig.menurecovery.duration,
                    airbossconfig.menurecovery.windondeck,
                    airbossconfig.menurecovery.uturn,
                    airbossconfig.menurecovery.offset)
        end
        objAirboss:SetMenuMarkZones(airbossconfig.enable_markzones)
        objAirboss:SetMenuSmokeZones(airbossconfig.enable_smokezones)
        objAirboss:SetAirbossNiceGuy(airbossconfig.enable_niceguy)
        objAirboss:SetRadioRelayMarshal(airbossconfig.releayunit.marshall)
        objAirboss:SetRadioRelayLSO(airbossconfig.releayunit.lso)
        objAirboss:SetSoundfilesFolder("Airboss Soundfiles/")
        objAirboss:SetDebugModeON()
        if airbossconfig.singlecarrier == true then
            objAirboss:SetMenuSingleCarrier()
        end
        --airbossCVN:Load(nil, "Greenie Board.csv")
        --airbossCVN:SetAutoSave(nil, "Greenie Board.csv")

        -- create fake recovery window at the end of the mission play
        --local window1 = airbossCVN:AddRecoveryWindow("15:00", "16:30", 3, 30, true, 20, false)
        --local window2 = airbossCVN:AddRecoveryWindow("18:00", "20:30", 3, 30, true, 20, false)
        --objAirboss:AddRecoveryWindow(
        --        60*45,
        --        60*(airbossconfig.menurecovery.duration+45),
        --        airbossconfig.recoverycase,
        --        airbossconfig.menurecovery.offset,
        --        true,
        --        airbossconfig.menurecovery.windondeck,
        --        airbossconfig.menurecovery.uturn
        --)

        function objAirboss:OnAfterRecoveryStart(From, Event, To, Case, Offset)
            trigger.action.outText('Recovery started Case '..Case..'\n Clearing Aft Deck...', 60)
            EnterRecovery(self.carrier:Name())
        end

        function objAirboss:OnAfterRecoveryStop(From, Event, To)
            trigger.action.outText('Recovery finished.\n Parking planes...', 60)
            LeaveRecovery(self.carrier:Name())
        end

        AIRBOSSArray[compteur] = objAirboss
        AIRBOSSArray[compteur]:Start()
        trigger.action.outText('AIRBOSS scripts Loaded for unit '..airbossconfig.carriername, 10)
        timer.scheduleFunction(function()
            trigger.action.outText(	"<< If the AIRBOSS option does not appear in your F10 - Other Menu, try switching slots a few times and you will get the AIRBOSS message popups! Check the AIRBOSS documentation (link in briefing for more info) >>", 30)
        end, nil, timer.getTime() + 30  )
    else
        timer.scheduleFunction(function()
            trigger.action.outText('AIRBOSS script disabled for unit '..airbossconfig.carriername, 10)
        end, nil, timer.getTime() + 8  )
    end
end

-- *****************************************************************************
--                     **                    Random Air Traffic               **
--                     *********************************************************
RATArray = {}
compteur = 0
for index, ratconfig in ipairs(RATConfig) do
    if ratconfig.enable == true then
        compteur = compteur +1
        for index_planegroup, planegroupconfig in ipairs(ratconfig.aircrafts_groupconfigs) do
            if planegroupconfig.spawns > 0 then
                local RATGroup = RAT:New(planegroupconfig.templatename)
                RATGroup:SetDeparture(planegroupconfig.airbases_names.departure)
                RATGroup:SetDestination(planegroupconfig.airbases_names.arrival)
                RATGroup:TimeDestroyInactive(planegroupconfig.inactive_timer)
                RATGroup:ATC_Messages(planegroupconfig.atcmessage_enable)
                RATGroup:SetFLcruise(planegroupconfig.flightlevel)
                if planegroupconfig.allow_immortal == true then
                    RATGroup:Immortal()
                end
                if planegroupconfig.allow_invisible == true then
                    RATGroup:Invisible()
                end
                RATArray[compteur] = RATGroup
                RATArray[compteur]:Spawn(planegroupconfig.spawns)
            end
        end
        timer.scheduleFunction(function()
            trigger.action.outText('Random Air Traffic '..ratconfig.name..' is ENABLED...', 10)
        end, nil, timer.getTime() + 8  )
    else
        timer.scheduleFunction(function()
            trigger.action.outText('Random Air Traffic '..ratconfig.name..' is DISABLED', 10)
        end, nil, timer.getTime() + 8)
    end
end


-- *****************************************************************************
--                     **                    SAM Defenses                     **
--                     *********************************************************
SAMNetworkArray = {}
compteur = 0
for index, iadsconfig in ipairs(IADSConfig) do
    if iadsconfig.enable == true then
        compteur = compteur +1
        env.info('creation Skynet IADS : '.. iadsconfig.name..'...')
        local objSkynet = SkynetIADS:create(iadsconfig.name)
        local skynetDebug = objSkynet:getDebugSettings()
        skynetDebug.IADSStatus = iadsconfig.debug
        skynetDebug.radarWentDark = iadsconfig.debug
        skynetDebug.contacts = iadsconfig.debug
        skynetDebug.radarWentLive = iadsconfig.debug
        skynetDebug.noWorkingCommmandCenter = iadsconfig.debug
        skynetDebug.ewRadarNoConnection = iadsconfig.debug
        skynetDebug.samNoConnection = iadsconfig.debug
        skynetDebug.jammerProbability = iadsconfig.debug
        skynetDebug.addedEWRadar = iadsconfig.debug
        skynetDebug.hasNoPower = iadsconfig.debug
        skynetDebug.harmDefence = iadsconfig.debug
        skynetDebug.samSiteStatusEnvOutput = iadsconfig.debug
        skynetDebug.earlyWarningRadarStatusEnvOutput = iadsconfig.debug
        skynetDebug.commandCenterStatusEnvOutput = iadsconfig.debug
        if iadsconfig.debug then
            objSkynet:addRadioMenu()
        end
        if iadsconfig.AwacsTemplateName == '' then
            iadsconfig.AwacsTemplateName = nil
        else
            iadsconfig.AwacsGroupName = nil
            for index, awacsObject in ipairs(AwacsArray) do
                if awacsObject.customconfig.groupName == iadsconfig.AwacsTemplateName then
                    env.info('IADS found AWACS linked to template '.. iadsconfig.AwacsTemplateName..' : it is '..GROUP:FindByName(awacsObject.tanker.GroupName):GetUnit(1):Name())
                    iadsconfig.AwacsGroupName = awacsObject.tanker.GroupName
                    objSkynet:addEarlyWarningRadar(GROUP:FindByName(awacsObject.tanker.GroupName):GetUnit(1):Name())
                end
            end
        end
        objSkynet.coalitionID = iadsconfig.coalition
        objSkynet:addEarlyWarningRadarsByPrefix(iadsconfig.EWRPrefix)
        objSkynet:addSAMSitesByPrefix(iadsconfig.SAMPrefix)
        objSkynet:addCommandCenter(GROUP:FindByName(iadsconfig.CommandCenterGroup):GetDCSObject())

        env.info('IADS : Configuring network nodes')
        if not( iadsconfig.interconnectionsconfig.EWR == nil or iadsconfig.interconnectionsconfig.EWR == {}) then
            for indexindex, ewr_netconfig in ipairs(iadsconfig.interconnectionsconfig.EWR) do
                if not(ewr_netconfig.powerstatic =='' or ewr_netconfig.powerstatic == nil) then
                    objSkynet:getEarlyWarningRadarByUnitName(ewr_netconfig.unitname):addPowerSource(STATIC:FindByName(ewr_netconfig.powerstatic):GetDCSObject())
                    env.info('IADS : add power to EWR '.. ewr_netconfig.unitname..' from static '.. ewr_netconfig.powerstatic)
                end
                if not(ewr_netconfig.communicationstatic =='' or ewr_netconfig.communicationstatic == nil) then
                    objSkynet:getEarlyWarningRadarByUnitName(ewr_netconfig.unitname):addConnectionNode(STATIC:FindByName(ewr_netconfig.communicationstatic):GetDCSObject())
                    env.info('IADS : add communication node to EWR '.. ewr_netconfig.unitname..' from static '.. ewr_netconfig.communicationstatic)
                end
                if not(ewr_netconfig.pointdefensegroupname =='' or ewr_netconfig.pointdefensegroupname == nil) then
                    objSkynet:getEarlyWarningRadarByUnitName(ewr_netconfig.unitname):addPointDefence(objSkynet:getSAMSiteByGroupName(ewr_netconfig.pointdefensegroupname))
                    env.info('IADS : add point defense node to EWR '.. ewr_netconfig.unitname..' from SAM Site '.. ewr_netconfig.pointdefensegroupname)
                end
            end
        end
        if not(iadsconfig.interconnectionsconfig.SAM == nil or iadsconfig.interconnectionsconfig.SAM == {}) then
            for indexindex, sam_netconfig in ipairs(iadsconfig.interconnectionsconfig.SAM) do
                objSkynet:getSAMSiteByGroupName(sam_netconfig.groupname):setActAsEW(sam_netconfig.isew)
                if not(sam_netconfig.powerstatic == '' or sam_netconfig.powerstatic == nil) then
                    objSkynet:getSAMSiteByGroupName(sam_netconfig.groupname):addPowerSource(STATIC:FindByName(sam_netconfig.powerstatic):GetDCSObject())
                    env.info('IADS : add power to SAM Site '.. sam_netconfig.groupname..' from static '.. sam_netconfig.powerstatic)
                end
                if not(sam_netconfig.communicationstatic =='' or sam_netconfig.communicationstatic == nil) then
                    objSkynet:getSAMSiteByGroupName(sam_netconfig.groupname):addConnectionNode(STATIC:FindByName(sam_netconfig.communicationstatic):GetDCSObject())
                    env.info('IADS : add communication node to SAM '.. sam_netconfig.groupname..' from static '.. sam_netconfig.communicationstatic)
                end
                if not(sam_netconfig.pointdefensegroupname =='' or sam_netconfig.pointdefensegroupname == nil) then
                    objSkynet:getSAMSiteByGroupName(sam_netconfig.groupname):addPointDefence(objSkynet:getSAMSiteByGroupName(sam_netconfig.pointdefensegroupname))
                    objSkynet:getSAMSiteByGroupName(sam_netconfig.groupname):setIgnoreHARMSWhilePointDefencesHaveAmmo(true)
                    env.info('IADS : add point defense node to SAM '.. sam_netconfig.groupname..' from SAM Site '.. sam_netconfig.pointdefensegroupname)
                end
            end
        end
        if not(iadsconfig.interconnectionsconfig.HQ == nil or iadsconfig.interconnectionsconfig.HQ == {}) then
            for indexindex, hq_netconfig in ipairs(iadsconfig.interconnectionsconfig.HQ) do
                if not(hq_netconfig.powerstatic == '' or hq_netconfig.powerstatic == nil) then
                    local HQTable = objSkynet:getCommandCenters()
                    for index, hqgroup in ipairs(HQTable) do
                        if hqgroup:getDCSName() == hq_netconfig.groupname then
                            if not(hq_netconfig.powerstatic =='' or hq_netconfig.powerstatic == nil) then
                                hqgroup:addPowerSource(STATIC:FindByName(hq_netconfig.powerstatic):GetDCSObject())
                                env.info('IADS : add power to Command Center Site '.. hq_netconfig.groupname..' from static '.. hq_netconfig.powerstatic)
                            end
                            if not(hq_netconfig.communicationstatic == {} or hq_netconfig.communicationstatic == nil) then
                                for index, commstatic in ipairs(hq_netconfig.communicationstatic) do
                                    hqgroup:addConnectionNode(STATIC:FindByName(commstatic):GetDCSObject())
                                    env.info('IADS : add communication node to Command Center Site '.. hq_netconfig.groupname..' from static '.. commstatic)
                                end
                            end
                            if not(hq_netconfig.pointdefensegroupname =='' or hq_netconfig.pointdefensegroupname == nil) then
                                hqgroup:addPointDefence(objSkynet:getSAMSiteByGroupName(hq_netconfig.pointdefensegroupname))
                                env.info('IADS : add point defense node to CommandCenter '.. hq_netconfig.groupname..' from SAM Site '.. hq_netconfig.pointdefensegroupname)
                            end

                        end
                    end
                end
            end
        end
        for index, samsite in ipairs(objSkynet:getSAMSites()) do
            samsite:setAutonomousBehaviour(SkynetIADSAbstractRadarElement.AUTONOMOUS_STATE_DARK)
            samsite:setEngagementZone(SkynetIADSAbstractRadarElement.GO_LIVE_WHEN_IN_KILL_ZONE)
            if not(iadsconfig.SAMRange == nil or iadsconfig.SAMRange == 0) then
                samsite:setGoLiveRangeInPercent(iadsconfig.SAMRange)
            end
            if not(iadsconfig.HARMDetectionChance == nil or iadsconfig.HARMDetectionChance == 0) then
                samsite:setHARMDetectionChance(iadsconfig.HARMDetectionChance)
            end
        end
        if not(iadsconfig.DetectInterval == nil or iadsconfig.DetectInterval == 0) then
            objSkynet:setUpdateInterval(iadsconfig.DetectInterval)
        end
        SAMNetworkArray[compteur] = objSkynet
        --SAMNetworkArray[compteur]:activate()
        SAMNetworkArray[compteur]:setupSAMSitesAndThenActivate()
    end
end

-- *****************************************************************************
--                     **                    Coalition Squadrons              **
--                     *********************************************************
A2AArray = {}
compteur = 0
for index, coalitionsquadconfig in ipairs(CoalitionSquadrons) do
    if coalitionsquadconfig.enable == true then
        compteur = compteur +1
        if not(coalitionsquadconfig.AwacsTemplateName == '') then
            for index, awacsObject in ipairs(AwacsArray) do
                if awacsObject.customconfig.groupName == coalitionsquadconfig.AwacsTemplateName then
                    env.info('A2ADispatch : found AWACS linked to template '..coalitionsquadconfig.AwacsTemplateName..' : it is '..awacsObject.tanker.GroupName)
                    table.insert(coalitionsquadconfig.detectionprefixarray,awacsObject.tanker.GroupName)
                end
            end
        end
        local DispatcherObject = AI_A2A_DISPATCHER:New(
                DETECTION_AREAS:New(
                        SET_GROUP:New()
                                 :FilterPrefixes(coalitionsquadconfig.detectionprefixarray)
                                 :FilterStart(),
                        coalitionsquadconfig.groupingrange)
        )
                                                  :SetDefaultFuelThreshold(coalitionsquadconfig.fuelthreshold)
                                                  :SetDefaultLanding(coalitionsquadconfig.landingtype)
                                                  :SetDefaultTakeoff(coalitionsquadconfig.takeofftype)
                                                  :SetDefaultCapLimit(coalitionsquadconfig.cappatrolpersquadron)
                                                  :SetDefaultGrouping(coalitionsquadconfig.defaultpatrolgrouping)
                                                  :SetEngageRadius(coalitionsquadconfig.engageradius)
                                                  :SetDisengageRadius(coalitionsquadconfig.abortradius)
                                                  :SetGciRadius(coalitionsquadconfig.gciradius)
        if not(coalitionsquadconfig.bordersgroup == '' or coalitionsquadconfig.bordersgroup == nil) then
            DispatcherObject = DispatcherObject:SetBorderZone(
                    ZONE_POLYGON:New(coalitionsquadconfig.bordersgroup,
                            GROUP:FindByName(coalitionsquadconfig.bordersgroup)
                    )
            )
        end
        for index, squadconfig in ipairs(coalitionsquadconfig.squadrons) do
            if squadconfig.enable then
                DispatcherObject:SetSquadron(
                        squadconfig.name,
                        squadconfig.base,
                        squadconfig.templatearray,
                        math.floor(squadconfig.numberofsplanes*squadconfig.availabilityrate)
                )
                if not(squadconfig.landingtype == '' or squadconfig.landingtype == nil) then
                    DispatcherObject:SetSquadronLanding(squadconfig.name,squadconfig.landingtype)
                end
                if not(squadconfig.takeofftype == '' or squadconfig.takeofftype == nil) then
                    DispatcherObject:SetSquadronTakeoff(squadconfig.name,squadconfig.takeofftype)
                end
                if ((squadconfig.capzonegroup == '' or squadconfig.capzonegroup == nil) and (squadconfig.capzone == '' or squadconfig.capzone == nil)) then
                    DispatcherObject:SetSquadronGci2(squadconfig.name, 920, 3000, 30, 14000, 'BARO')
                else
                    if (squadconfig.capzone == '' or squadconfig.capzone == nil) then
                        squadconfig.CAPZone = ZONE_POLYGON:New(squadconfig.name .. 'CAPZone', GROUP:FindByName(squadconfig.capzonegroup))
                    else
                        squadconfig.CAPZone = ZONE:New(squadconfig.capzone)
                    end
                    DispatcherObject:SetSquadronCap2(squadconfig.name, 740, 3000, 30, 14000, 'BARO', squadconfig.CAPZone, 400, 900, 4500, 9100, 'BARO')
                    DispatcherObject:SetSquadronCapInterval(squadconfig.name, 1, 2*60, 15*60)
                end
            end
        end
        DispatcherObject:SetTacticalDisplay(coalitionsquadconfig.debug)
        A2AArray[compteur] = DispatcherObject
        A2AArray[compteur]:Start()
    end
end
